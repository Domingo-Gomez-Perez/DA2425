#lang racket
(define (count-pairs x)
  (if (not (mpair? x))
      0
      (+ (count-pairs (mcar x))
         (count-pairs (mcdr x))
         1)))

(define a (mcons 'a (mcons 'b (mcons 'c null))))
(count-pairs a) ; En este caso el metodo funciona correctamente
; Representación caja y puntero: (a) --> (b) --> (c) --> null

(define shared (mcons 'b (mcons 'c null)))
(define b (mcons 'a shared))         ; Primer par apunta a `shared`
(set-mcar! (mcdr shared) shared)     ; `cdr` del segundo par apunta nuevamente a `shared`
(count-pairs b)





(define d (mcons 'a null))
(set-mcdr! d (mcons 'b d)) ; Crear un bucle
(count-pairs d)
;(a) --> (b) --
; ↑               |
; |---------------|


