; Entra algo asi en el examen

#| Exercise 3.11: Will discuss as a group. In 3.2.3 we saw how the environment model described the behavior of procedures with local state.
Now we have seen how internal definitions work. A typical message-passing procedure contains both of these aspects.
Consider the bank account procedure of 3.1.1:

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance 
                     (- balance 
                        amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: 
                        MAKE-ACCOUNT" 
                       m))))
  dispatch)
Show the environment structure generated by the sequence of interactions

(define acc (make-account 50))

((acc 'deposit) 40)
90

((acc 'withdraw) 60)
30
Where is the local state for acc kept? Suppose we define another account

(define acc2 (make-account 100))
How are the local states for the two accounts kept distinct? Which parts of the environment
structure are shared between acc and acc2? |#


Solucion: cuando se ejecuta el comando `(define acc (make-account 50))`, se crea un nuevo ambiente que esta enlazado al ambiente global
y dando un vlor al argumento. En este caso, se introducen al ambiente tres funciones: dispatch, deposit, withdrawn. 

1. (define acc (make-account 50))

Al evaluar el comando ((acc 'deposit) 40), se llama a la funcion dispatch con m = 'deposit. Esta funcion devuelve la funcion deposit.
Luego, se llama a la funcion deposit con ammount = 40 y se mete en el ambiente. Esta funcion devuelve 90.

lo de acc2
Aqui ni el codigo ni ambiente se comparte, aunque se podria crear el codigo compartido para ahorrar memoria, no se hace
se crea uno nuevo para cada llamada a make-account. |#

