#lang racket

#|
Hecho por:
EZQUERRA CEBALLOS, CARLOS
FERNÁNDEZ RIVERA, CRISTIAN MANUEL
GOMEZ GARCIA, GABRIEL
MUÑOZ FERNANDEZ, PAULA

Exercise 3.11: Will discuss as a group. In 3.2.3 we saw how the environment model described the behavior
of procedures with local state. Now we have seen how internal definitions work. A typical message-passing
procedure contains both of these aspects. Consider the bank account procedure of 3.1.1:

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance 
                     (- balance 
                        amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: 
                        MAKE-ACCOUNT" 
                       m))))
  dispatch)

Show the environment structure generated by the sequence of interactions

(define acc (make-account 50))

((acc 'deposit) 40)
90

((acc 'withdraw) 60)
30

Where is the local state for acc kept? Suppose we define another account

(define acc2 (make-account 100))

How are the local states for the two accounts kept distinct? Which parts of the environment structure are shared between acc and acc2?
|#

Entornos generados por las interacciones:

Interacción Inicial - make-account 50

Al llamar a (define acc (make-account 50)), se crea un entorno E1 en el que:

Se asocia balance a 50.
Se definen las funciones locales withdraw, deposit, y dispatch en el entorno de E1.
El entorno E1 es el entorno local de la cuenta acc, y su estado local (el saldo) está asociado con esta cuenta. 
Es decir, balance tiene un valor local de 50 en este entorno.

Interacción - ((acc 'deposit) 40)

Llamamos a (acc 'deposit) para acceder al procedimiento de depósito.
Esto hace que el entorno de acc invoque la función deposit, pasando 40 como argumento.
Dentro de la ejecución de deposit, el valor de balance (local a la cuenta acc) se actualiza a 90.
El modelo de entorno en este paso se ve así:

Interacción - ((acc 'withdraw) 60)

Ahora se invoca (acc 'withdraw) para retirar dinero.
Esto llama a la función withdraw con un argumento de 60.
Dentro de withdraw, el valor de balance (que es 90) se reduce en 60, dejando un saldo de 30.
El modelo de entorno muestra que:


¿Dónde se guarda el estado local de acc?

El estado local de cada cuenta, como el saldo, se guarda en el entorno de cada cuenta. 
Para cada cuenta creada con make-account, se crea un nuevo entorno con su propio estado local 
(el balance). En este caso:

Para acc, el entorno E1 mantiene el saldo local.
Para acc2 (creado con (define acc2 (make-account 100))), se crea un nuevo entorno E2 donde el 
saldo inicial es 100. Esto asegura que los estados de las dos cuentas se mantengan distintos.


¿Cómo se mantienen los estados locales para acc y acc2?
Estado local de acc: En el entorno E1, balance comenzó con 50, luego se actualizó a 90 y 
finalmente a 30.

Estado local de acc2: En el entorno E2, balance comenzó con 100 y permanece separado de acc
debido a que ambos entornos son distintos.


¿Qué partes del entorno se comparten entre acc y acc2?
Comparten solo el entorno global, ya que cada cuenta tiene su propio entorno local.

Aunque las funciones `deposit` y `withdraw` son las mismas para ambos, cada instancia de `make-account` mantiene su propio ambiente, 
lo que significa que el estado local (el valor de `balance`) se mantiene separado para cada cuenta.
Aqui ni el codigo ni ambiente se comparte, aunque se podria crear el codigo compartido para ahorrar memoria, no se hace
se crea uno nuevo para cada llamada a make-account.


 __________________________
|  Global Environment      |
|--------------------------|
|  make-account: <procedure>|
|__________________________|
        ^
        |
 _________________________________________   _______________________________________
|           acc Environment (Created)     | |           acc2 Environment (Created) |
|-----------------------------------------| |--------------------------------------|
| balance: 50                             | | balance: 100                        |
| withdraw: <procedure>                   | | withdraw: <procedure>               |
| deposit: <procedure>                    | | deposit: <procedure>                |
| dispatch: <procedure>                   | | dispatch: <procedure>               |
|_________________________________________| |______________________________________|