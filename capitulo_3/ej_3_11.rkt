#lang racket


#|

**Exercise 3.11:** Will discuss as a group.  In 3.2.3 we saw how
the environment model described the behavior of procedures with local state.
Now we have seen how internal definitions work.  A typical message-passing
procedure contains both of these aspects.  Consider the bank account procedure
of 3.1.1:

```
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance 
                     (- balance 
                        amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: 
                        MAKE-ACCOUNT" 
                       m))))
  dispatch)
```

Show the environment structure generated by the sequence of interactions

```
(define acc (make-account 50))

((acc 'deposit) 40)
90

((acc 'withdraw) 60)
30
```

Where is the local state for `acc` kept?  Suppose we define another
account

```
(define acc2 (make-account 100))
```

How are the local states for the two accounts kept distinct?  Which parts of
the environment structure are shared between `acc` and `acc2`?
|#

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance 
                     (- balance 
                        amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: 
                        MAKE-ACCOUNT" 
                       m))))
  dispatch)



(define acc (make-account 50))

#|
1) Cuando se ejecuta el método make-account se crea un nuevo ambiente que está enlazado al ambiente
global y dando un valor al argumento.

En este caso, se introducen al ambiente 3 funciones: dispatch, deposit, withdraw.

|#


((acc 'deposit) 40) ;90
#|
Al evaluar ((acc 'deposit) 40), se llama a la función dispatch con m = 'deposit y devuelve la función deposit,
esta es llamada con amount = 40

|#

((acc 'withdraw) 60) ;30


#|
Respuesta a "Show the environment structure generated by the sequence of interactions":

1)(define acc (make-account 50))
2)((acc 'deposit) 40)
3)((acc 'withdraw) 60)



1)(define acc (make-account 50))

Global
 |-- make-account
 |-- acc: → dispatch (en E1)
E1 (ambiente local de acc)
 |--balance: 50
 |-- withdraw: procedimiento (usa balance de E1)
 |-- deposit: procedimiento (usa balance de E1
 |-- dispatch: procedimiento (maneja withdraw y deposit)


Cuando evaluamos (define acc (make-account 50)), los siguientes pasos ocurren:
 -En el ambiente global, se define make-account como un procedimiento.
 -Llamar a (make-account 50) crea un nuevo ambiente local específico para esa ejecución con lo siguiente:
  .Una nueva variable local balance se establece en 50.
  .Se definen internamente los procedimientos withdraw, deposit y dispatch en este ambiente.
  .dispatch es el procedimiento retornado, y se asigna a acc en el ambiente global.


2)((acc 'deposit) 40)

E1
 |-- balance: 90
 |-- withdraw: procedimiento (usa balance de E1)
 |-- deposit: procedimiento (usa balance de E1)
 |-- dispatch: procedimiento (maneja withdraw y deposit)


Cuando evaluamos ((acc 'deposit) 40), sucede lo siguiente:
 -En el ambiente global, acc apunta al procedimiento dispatch en el ambiente E1.

 -(acc 'deposit) invoca dispatch con el mensaje 'deposit': Dentro de dispatch, el mensaje 'deposit'
  se asocia al procedimiento deposit, que está definido en el ambiente E1.

 -deposit se invoca con el argumento 40: balance se actualiza en E1 a 50 + 40 = 90. deposit devuelve
  el nuevo valor de balance, que es 90.



3)((acc 'withdraw) 60)


E1
 |-- balance: 30
 |-- withdraw: procedimiento (usa balance de E1)
 |-- deposit: procedimiento (usa balance de E1)
 |-- dispatch: procedimiento (maneja withdraw y deposit)


Cuando evaluamos ((acc 'withdraw) 60), sucede lo siguiente:
 
 -En el ambiente global, acc apunta al procedimiento dispatch en el ambiente E1.
 
 -(acc 'withdraw) invoca dispatch con el mensaje 'withdraw': Dentro de dispatch, el mensaje 'withdraw' se asocia al procedimiento withdraw,
  que está definido en el ambiente E1.
 
 -withdraw se invoca con el argumento 60: Como balance >= amount (90 >= 60),
  se actualiza balance en E1 a 90 - 60 = 30. withdraw devuelve el nuevo valor de balance, que es 30.



Respuesta a :
Where is the local state for `acc` kept?  Suppose we define another
account

```
(define acc2 (make-account 100))


Global
 |-- make-account
 |-- acc: → dispatch (en E1)
 |-- acc2: → dispatch (en E2)
E1
 |-- balance: 30
 |-- withdraw: procedimiento (usa balance de E1)
 |-- deposit: procedimiento (usa balance de E1)
 |-- dispatch: procedimiento (maneja withdraw y deposit)
E2
 |-- balance: 100
 |-- withdraw: procedimiento (usa balance de E2)
 |-- deposit: procedimiento (usa balance de E2)
 |-- dispatch: procedimiento (maneja withdraw y deposit)


Cuando evaluamos (define acc2 (make-account 100)), sucede lo siguiente:
 -En el ambiente global, se define acc2 como un nuevo procedimiento dispatch.
 
 -Llamar a (make-account 100) crea un nuevo ambiente local E2,
  independiente del ambiente E1 con una nueva variable local balance que se establece en 100.
  y se definen procedimientos internos withdraw, deposit, y dispatch que operan sobre balance en E2.

Where is the local state for `acc` kept?

Respuesta: El estado local de acc se guarda en el ambiente E1, que es creado cuando se llama a (make-account 50).
La variable balance y los procedimientos internos (withdraw, deposit, dispatch)
están definidos en este ambiente. Todo cambio en el balance afecta únicamente a E1.

Suppose we define another
account

```
(define acc2 (make-account 100))
```

How are the local states for the two accounts kept distinct?

Respuesta: Cada vez que se llama a make-account, se crea un nuevo ambiente local independiente (E1 para acc, E2 para acc2).
Los balances balance de estas cuentas están definidos en sus respectivos ambientes,
y los procedimientos internos en cada ambiente operan sobre el balance asociado a ese ambiente.
Por tanto, las modificaciones a una cuenta no afectan a la otra.

Which parts of the environment structure are shared between `acc` and `acc2`?

Respuesta: La única parte compartida es el ambiente global, donde está definida la función make-account.
Tanto acc como acc2 acceden a make-account desde este ambiente, pero sus estados locales (balance, procedimientos)
 son completamente independientes.

|#