#lang racket

; Exercise 3.51

; In order to take a closer look at delayed evaluation, we will use
; the following procedure, which simply returns its argument after 
; printing it:

(define (show x)
  (displayln x)
  x)

; What does the interpreter print in response to evaluating each
; expression in the following sequence?

(define (stream-enumerate-interval start stop)
    (if (> start stop)
        empty-stream
        (stream-cons start (stream-enumerate-interval (+ start 1) stop))))

(define x
  (stream-map show (stream-enumerate-interval 0 10)))


; Example of use
(stream-ref x 5)    ; 5
(stream-ref x 7)    ; 7


; x = (stream-map show (stream-enumerate-interval 0 10)). 
;
; This function takes two arguments as input: a function and a stream of
; numbers. It then applies that function to all elements of the stream.
;
; In this case, it applies the `show` function to a stream of numbers in the
; range 0-10, which is generated by the function `stream-enumerate-interval`.
;
; Since x is a stream, only the element specified as input to `stream-ref`
; is evaluated, applying the `show` function at that moment.
