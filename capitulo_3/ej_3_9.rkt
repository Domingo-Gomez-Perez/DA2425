#lang racket

(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
;___________________________________________________
;| factorial:                              Globals |
;|   ___________________________________________   |
;|  | n: 6                              call 1  |  |
;|  |   ____________________________________    |  | 
;|  |  | n: 5                        call 2 |   |  |
;|  |  |   _______________________________  |   |  |
;|  |  |  | n: 4                   call 3 | |   |  |
;|  |  |  |   __________________________  | |   |  |
;|  |  |  |  | n: 3            call 4   | | |   |  |
;|  |  |  |  |   _____________________  | | |   |  |
;|  |  |  |  |  | n: 2         call 5 | | | |   |  |
;|  |  |  |  |  |   ________________  | | | |   |  |
;|  |  |  |  |  |  | n: 1    call 6 | | | | |   |  |
;|  |  |  |  |  |  |________________| | | | |   |  |
;|  |  |  |  |  |_____________________| | | |   |  |
;|  |  |  |  |__________________________| | |   |  |
;|  |  |  |_______________________________| |   |  |
;|  |  |____________________________________|   |  |
;|  |___________________________________________|  |
;|_________________________________________________|

(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product 
                   counter 
                   max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
; _______________________________________________
;| factorial:                   Globals          |
;|_______________________________________________|
;|                                               |
;|  ___________________________________________  |
;| | fact-iter:                   Iter1        | |
;| |  _______________________________________  | |
;| | | product: 1  counter: 1   max-count: 6 | | |
;| | |_______________________________________| | |
;| |___________________________________________| |
;|  ___________________________________________  |
;| | fact-iter:                   Iter2        | |
;| |  _______________________________________  | |
;| | | product: 2  counter: 2   max-count: 6 | | |
;| | |_______________________________________| | |
;| |___________________________________________| |
;|  ___________________________________________  |
;| | fact-iter:                   Iter3        | |
;| |  _______________________________________  | |
;| | | product: 6  counter: 3   max-count: 6 | | |
;| | |_______________________________________| | |
;| |___________________________________________| |
;|  ___________________________________________  |
;| | fact-iter:                   Iter4        | |
;| |  _______________________________________  | |
;| | | product: 24 counter: 4   max-count: 6 | | |
;| | |_______________________________________| | |
;| |___________________________________________| |
;|  ___________________________________________  |
;| | fact-iter:                   Iter5        | |
;| |  _______________________________________  | |
;| | | product: 120 counter: 5  max-count: 6 | | |
;| | |_______________________________________| | |
;| |___________________________________________| |
;|  ___________________________________________  |
;| | fact-iter:                   Iter6        | |
;| |  _______________________________________  | |
;| | | product: 720 counter: 6  max-count: 6 | | |
;| | |_______________________________________| | |
;| |___________________________________________| | 
;|_______________________________________________|
